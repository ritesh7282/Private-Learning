find . -type f -mtime -105 -mtime +76
canary release vs future togal
canary release --> 2,4,6,25,50,100
blue green --> 
CI/CD
Services in Kubernetes
Storage classes in kubernetes
SSH hardening

sudo nano /etc/ssh/sshd_config 
In this file, look for:

#ClientAliveInterval 0  --> #ClientAliveInterval 300
sudo systemctl restart sshd

#PermitEmptyPasswords no 

i-node in linux
SLA vs SLI - service level indicator
git rebase Vs git merge
Merge --> merges contents of two branches
Rebase --> Base one branch with master
monitoring purpose
========================================================================


Image layering in docker
pipeline as code
public key infra
terraform and terra-grant
Linux boot
System load
Less space for Image
rebase vs Merge

===================================================

Helm Charts
Docker
Linux

=======================================================================

node selector
kops -node selector
instance grp in kops
API server to database connection issue
--> security grp
--> telnet the ports

=====================================================================
#!/bin/bash
IP=10.7.137.236
PORT=32111
echo "* Request for authorization"
RESULT=`curl --data "username=admin&password=alp4Security&grant_type=password&client_id=admin-cli" http://$IP:$PORT/auth/realms/master/protocol/openid-connect/token`

echo "\n"
echo "* Recovery of the token"
access_token=`echo $RESULT | sed 's/.*access_token":"//g' | sed 's/".*//g'`

echo "\n"
echo "* Display token"
echo $TOKEN

#realm=master
#realm=Account
realm=ALP
elm=master

#realm=Account
baseurl=http://$IP:$PORT/auth

while read -r line; do
    IFS=',' read -ra arr <<< "$line"

    echo "${arr[0]}" "${arr[1]}"  "${arr[2]}"



username=${arr[0]}
email=${arr[2]}
role=${arr[1]}
inserted_at="2020-09-28 10:30:00.0"
updated_at="2020-09-28 10:30:01.0"
 result1=$(curl --write-out " %{http_code}" -s -k --request GET \
  --header "Authorization: Bearer $access_token" \
  "$baseurl/admin/realms/$realm/users?username=${username}")
userid=`echo $result1 | grep -Eo '"id":.*?[^\\]"' | cut -d':'  -f 2 | sed -e 's/"//g'|awk '{sub(/,.*/,x)}1'`
#result=$(curl --write-out " %{http_code}" -s -k --request DELETE \
#  --header "Authorization: Bearer $access_token" \
#  "$baseurl/admin/realms/$realm/users/$userid")

#ROLE_NAME=DRIVER
ROLE_NAME1=${arr[1]}

if [ $ROLE_NAME1 == MOBILE_ACCESS ]
then
ROLE_NAME=MOBILE_ACCESS
ROLE_ID=d191c90f-7b88-44d1-85e8-d60763cc6358
echo "inside code"
else
#USER_ID=6f992705-33de-49b0-a278-386d617879ee
ROLE_ID=d191c90f-7b88-44d1-85e8-d60763cc6358
ROLE_NAME=MOBILE_ACCESS
fi
client=0a04ff6c-5030-46b2-a336-b468af6a6a10
#ROLE_ID=3e1b2026-33ab-4789-947a-b8206aa4cf14
#ROLE_ID1=dbc579e9-e543-4d03-b345-6451f456485a
curl -v -X POST -w "\n" http://$IP:$PORT/auth/admin/realms/$realm/users/$userid/role-mappings/clients/$client -H "Content-Type: application/json" -H "Authorization: bearer $access_token" --data '[{"id":"'$ROLE_ID'","name":"'$ROLE_NAME'"}]'
#curl -v -X POST -w "\n" http://10.3.26.21:8080/auth/admin/realms/demo/users/$userid/role-mappings/realm -H "Content-Type: a
#pplication/json" -H "Authorization: bearer $access_token" --data '[{"id":"'$ROLE_ID1'","name":"SUPERVISOR"}]'

#curl -H "Authorization: bearer $access_token" http://10.3.26.21:8080/auth/admin/realms/demo/users/$userid/role-mappings/realm




done < data3.csv
&5Albodegv

========================================================================
#!/bin/bash
IP=10.7.137.236
PORT=32111
echo "* Request for authorization"
RESULT=`curl --data "username=admin&password=alp4Security&grant_type=password&client_id=admin-cli" http://$IP:$PORT/auth/realms/master/protocol/openid-connect/token`

echo "\n"
echo "* Recovery of the token"
access_token=`echo $RESULT | sed 's/.*access_token":"//g' | sed 's/".*//g'`

echo "\n"
echo "* Display token"
echo $TOKEN

#realm=master
#realm=Account
realm=ALP
elm=master

#realm=Account
baseurl=http://$IP:$PORT/auth

while read -r line; do
    IFS=',' read -ra arr <<< "$line"

    echo "${arr[0]}" "${arr[1]}"  "${arr[2]}"



username=${arr[0]}
email=${arr[2]}
role=${arr[1]}
inserted_at="2020-09-28 10:30:00.0"
updated_at="2020-09-28 10:30:01.0"
 result1=$(curl --write-out " %{http_code}" -s -k --request GET \
  --header "Authorization: Bearer $access_token" \
  "$baseurl/admin/realms/$realm/users?username=${username}")
userid=`echo $result1 | grep -Eo '"id":.*?[^\\]"' | cut -d':'  -f 2 | sed -e 's/"//g'|awk '{sub(/,.*/,x)}1'`
#result=$(curl --write-out " %{http_code}" -s -k --request DELETE \
#  --header "Authorization: Bearer $access_token" \
#  "$baseurl/admin/realms/$realm/users/$userid")

#ROLE_NAME=DRIVER
ROLE_NAME1=${arr[1]}

if [ $ROLE_NAME1 == MOBILE_ACCESS ]
then
ROLE_NAME=MOBILE_ACCESS
ROLE_ID=d191c90f-7b88-44d1-85e8-d60763cc6358
echo "inside code"
else
#USER_ID=6f992705-33de-49b0-a278-386d617879ee
ROLE_ID=d191c90f-7b88-44d1-85e8-d60763cc6358
ROLE_NAME=MOBILE_ACCESS
fi
client=0a04ff6c-5030-46b2-a336-b468af6a6a10
#ROLE_ID=3e1b2026-33ab-4789-947a-b8206aa4cf14
#ROLE_ID1=dbc579e9-e543-4d03-b345-6451f456485a
curl -v -X POST -w "\n" http://$IP:$PORT/auth/admin/realms/$realm/users/$userid/role-mappings/clients/$client -H "Content-Type: application/json" -H "Authorization: bearer $access_token" --data '[{"id":"'$ROLE_ID'","name":"'$ROLE_NAME'"}]'
#curl -v -X POST -w "\n" http://10.3.26.21:8080/auth/admin/realms/demo/users/$userid/role-mappings/realm -H "Content-Type: a
#pplication/json" -H "Authorization: bearer $access_token" --data '[{"id":"'$ROLE_ID1'","name":"SUPERVISOR"}]'

#curl -H "Authorization: bearer $access_token" http://10.3.26.21:8080/auth/admin/realms/demo/users/$userid/role-mappings/realm




done < data3.csv
==================================================================================

arr[$i]=${values}
echo ${arr[*]}
for numbers -lt, -gt, -eq
sum=$((sum+$i))
i=$((i+1))

if [[ ( $username == "admin" && $password == "secret" ) ]]; then

sorted=($(printf '%s\n' "${arr[@]}"|sort))
if [ "${sorted[i]}" == "${sorted[j]}" ]; then

awk {print $1,$4}
awk '/manager/ {print $1,$4}' 
To print any non empty line if present   : awk ‘NF == 0 {print NR}’ 

sed -i 's/o/X/g' foo.txt  : for permanent changes
sed -e 's/linux/unix/' -e 's/os/OS/' file.txt : -e option is for executing multiple sed commands

process_id=$! : PID of the last pid cmd
$@ refers to all of a shell script's command-line arguments. $1 , $2 , etc., refer to the first command-line argument, the second command-line argument, etc
$?  $? is a special variable in shell that reads the exit status of the last command executed.
retVal=$?
if [ $retVal -ne 0 ]; then
    echo "Error"
fi
exit $retVal


=======================================================================

@ECHO Off

echo This script will assist you in applying the opatch but before that please give us the appropriate path for JAVA, ORACLE and OPATCH


set OPATCH=C:\Oracle\Oracle_12.2.1.3.0\OPatch
set Patch=C:\Users\Administrator\Downloads\p32755804_122130_Generic\WLS_SPB_12.2.1.3.210411\binary_patches
set ORA_HOME=C:\Oracle\Oracle_12.2.1.3.0
set PATH=%ORA_HOME%/OPatch;%PATH%

echo The previous patches which has been applied:

@pause

start cmd.exe /c "%OPATCH%\opatch lsinventory  -oh %ORA_HOME% >C:\Users\Administrator\Desktop\output-lsinventory.txt"

echo "Please check output-lsinventory.txt"

cd %Patch%
%OPATCH%\opatch napply -phBaseFile linux64_patchlist.txt  -oh %ORA_HOME%>C:\Users\Administrator\Desktop\output-apply.txt

@pause

=================================================================================================

